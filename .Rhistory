# Check dataset type
str(df)
# Consider txn_date is type factor. We have to change it to date type.
df$txn_date <- as.Date(df$txn_date, format="%m/%d/%Y")
tail(df)
str(df)
# Check NA
sum(is.na(df))
df %>% select(everything()) %>%
summarise_all(list(~sum(is.na(.))))
# Replace NA with 0
dfClean <- df %>% select(-total_tests,
-new_tests,
-reproduction_rate)
dfClean[is.na(dfClean)] <- 0
sum(is.na(dfClean))
dfTemp <- df %>% select(total_tests,
new_tests,
reproduction_rate)
dfTemp$total_tests[is.na(dfTemp$total_tests)] <- na.ma(df$total_tests, weighting = "linear", k=21)
na.ma(df$total_tests, weighting = "linear", k=21)
na.ma(df$total_tests, weighting = "linear", k=1)
na.ma(df$total_tests, weighting = "linear", k=21)[837]
na.ma(df$total_tests, weighting = "linear", k=21)[834:854]
dfTemp$total_tests[is.na(dfTemp$total_tests)] <- na.ma(df$total_tests, weighting = "linear", k=21)[834:854]
library(tidyverse)
library(ggplot2)
library(corrplot)
library(dplyr)
library(lubridate)
library(forecast)
library(imputeTS)
df <- read.csv("dataset/dataCovidPredict.csv")
## Preporcessing data
# Check dataset type
str(df)
# Consider txn_date is type factor. We have to change it to date type.
df$txn_date <- as.Date(df$txn_date, format="%m/%d/%Y")
tail(df)
str(df)
sum(is.na(df))
df %>% select(everything()) %>%
summarise_all(list(~sum(is.na(.))))
# Replace NA with 0
dfClean <- df %>% select(-total_tests,
-new_tests,
-reproduction_rate)
dfClean[is.na(dfClean)] <- 0
sum(is.na(dfClean))
dfTemp <- df %>% select(total_tests,
new_tests,
reproduction_rate)
dfTemp$total_tests[is.na(dfTemp$total_tests)] <- na.ma(df$total_tests, weighting = "linear", k=21)[834:854]
23689807 < 23676921
str(dfTemp)
dfTemp$new_tests[is.na(dfTemp$new_tests)] <- na.ma(df$new_tests, weighting = "linear", k=21)[834:854]
ceiling_dec(na.ma(df$new_tests, weighting = "linear", k=21)[834:854],0)
ceiling(na.ma(df$new_tests, weighting = "linear", k=21)[834:854],0)
ceiling(na.ma(df$new_tests, weighting = "linear", k=21)[834:854])
round(na.ma(df$new_tests, weighting = "linear", k=21)[834:854],0)
dfTemp$new_tests[is.na(dfTemp$new_tests)] <- round(na.ma(df$new_tests, weighting = "linear", k=21)[834:854],0)
library(tidyverse)
library(ggplot2)
library(corrplot)
library(dplyr)
library(lubridate)
library(forecast)
library(imputeTS)
df <- read.csv("dataset/dataCovidPredict.csv")
## Preporcessing data
# Check dataset type
str(df)
# Consider txn_date is type factor. We have to change it to date type.
df$txn_date <- as.Date(df$txn_date, format="%m/%d/%Y")
tail(df)
str(df)
# Check NA
sum(is.na(df))
df %>% select(everything()) %>%
summarise_all(list(~sum(is.na(.))))
# Replace NA with 0
dfClean <- df %>% select(-total_tests,
-new_tests,
-reproduction_rate)
dfClean[is.na(dfClean)] <- 0
sum(is.na(dfClean))
dfTemp <- df %>% select(total_tests,
new_tests,
reproduction_rate)
dfTemp$total_tests[is.na(dfTemp$total_tests)] <- na.ma(df$total_tests, weighting = "linear", k=21)[834:854]
dfTemp$new_tests[is.na(dfTemp$new_tests)] <- round(na.ma(df$new_tests, weighting = "linear", k=21)[834:854],0)
na.ma(df$reproduction_rate, weighting = "linear", k=64)
na.ma(df$reproduction_rate, weighting = "linear", k=64)[1:64]
library(tidyverse)
library(ggplot2)
library(corrplot)
library(dplyr)
library(lubridate)
library(forecast)
library(imputeTS)
df <- read.csv("dataset/dataCovidPredict.csv")
## Preporcessing data
# Check dataset type
str(df)
# Consider txn_date is type factor. We have to change it to date type.
df$txn_date <- as.Date(df$txn_date, format="%m/%d/%Y")
tail(df)
str(df)
sum(is.na(df))
df %>% select(everything()) %>%
summarise_all(list(~sum(is.na(.))))
# Replace NA with 0
dfClean <- df %>% select(-total_tests,
-new_tests,
-reproduction_rate)
dfClean[is.na(dfClean)] <- 0
sum(is.na(dfClean))
dfTemp <- df %>% select(total_tests,
new_tests,
reproduction_rate)
dfTemp$total_tests[is.na(dfTemp$total_tests)] <- na.ma(dfTemp$total_tests, weighting = "linear", k=21)[834:854]
dfTemp$new_tests[is.na(dfTemp$new_tests)] <- round(na.ma(dfTemp$new_tests, weighting = "linear", k=21)[834:854],0)
dfTemp$reproduction_rate[is.na(dfTemp$reproduction_rate)] <- round(na.ma(dfTemp$reproduction_rate, weighting = "linear", k=64)[1:64],2)
ggplot(stack(df), aes(x = ind, y = values, color=ind)) +
geom_boxplot(outlier.color="black")
library(tidyverse)
library(ggplot2)
library(corrplot)
library(dplyr)
library(lubridate)
library(forecast)
library(imputeTS)
df <- read.csv("dataset/dataCovidPredict.csv")
## Preporcessing data
# Check dataset type
str(df)
# Consider txn_date is type factor. We have to change it to date type.
df$txn_date <- as.Date(df$txn_date, format="%m/%d/%Y")
tail(df)
str(df)
# Check outlier
#Overall
overallOutlier <- ggplot(stack(df), aes(x = ind, y = values, color=ind)) +
geom_boxplot(outlier.color="black")
overallOutlier
sum(is.na(df))
df %>% select(everything()) %>%
summarise_all(list(~sum(is.na(.))))
# Replace NA with 0
dfClean <- df %>% select(-total_tests,
-new_tests,
-reproduction_rate)
dfClean[is.na(dfClean)] <- 0
sum(is.na(dfClean))
dfTemp <- df %>% select(total_tests,
new_tests,
reproduction_rate)
dfTemp$total_tests[is.na(dfTemp$total_tests)] <- na.ma(dfTemp$total_tests, weighting = "linear", k=21)[834:854]
dfTemp$new_tests[is.na(dfTemp$new_tests)] <- round(na.ma(dfTemp$new_tests, weighting = "linear", k=21)[834:854],0)
dfTemp$reproduction_rate[is.na(dfTemp$reproduction_rate)] <- round(na.ma(dfTemp$reproduction_rate, weighting = "linear", k=64)[1:64],2)
library(tidyverse)
library(ggplot2)
library(corrplot)
library(dplyr)
library(lubridate)
library(forecast)
library(imputeTS)
df <- read.csv("dataset/dataCovidPredict.csv")
## Preporcessing data
# Check dataset type
str(df)
# Consider txn_date is type factor. We have to change it to date type.
df$txn_date <- as.Date(df$txn_date, format="%m/%d/%Y")
tail(df)
str(df)
# Check outlier
#Overall
overallBeforeNA <- ggplot(stack(df), aes(x = ind, y = values, color=ind)) +
geom_boxplot(outlier.color="black")
#1 txn_date: NO
ggplot(df, aes('',txn_date)) +
geom_boxplot()
#2 new_case: YES
ggplot(df, aes('',new_case)) +
geom_boxplot()
#3 total_case: YES
ggplot(df, aes('',total_case)) +
geom_boxplot()
#4 new_case_excludeabroad: YES
ggplot(df, aes('',new_case_excludeabroad)) +
geom_boxplot()
#5 total_case_excludeabroad: YES
ggplot(df, aes('',total_case_excludeabroad)) +
geom_boxplot()
#6 new_death: YES
ggplot(df, aes('',new_death)) +
geom_boxplot()
#7 total_death: NO
ggplot(df, aes('',total_death)) +
geom_boxplot()
#8 new_recovered: YES
ggplot(df, aes('',new_recovered)) +
geom_boxplot()
#9 total_recovered: YES
ggplot(df, aes('',total_recovered)) +
geom_boxplot()
#10 total_vaccinations: NO
ggplot(df, aes('',total_vaccinations)) +
geom_boxplot()
#11 people_vaccinated: NO
ggplot(df, aes('',people_vaccinated)) +
geom_boxplot()
#12 people_fully_vaccinated: NO
ggplot(df, aes('',people_fully_vaccinated)) +
geom_boxplot()
#13 total_boosters: YES
ggplot(df, aes('',total_boosters)) +
geom_boxplot()
#14 new_vaccinations: YES
ggplot(df, aes('',new_vaccinations)) +
geom_boxplot()
#15 stringency_index: YES
ggplot(df, aes('',stringency_index)) +
geom_boxplot()
#16 excess_mortality_cumulative_absolute: YES
ggplot(df, aes('',excess_mortality_cumulative_absolute)) +
geom_boxplot()
#17 excess_mortality_cumulative: YES
ggplot(df, aes('',excess_mortality_cumulative)) +
geom_boxplot()
#18 excess_mortality: YES
ggplot(df, aes('',excess_mortality)) +
geom_boxplot()
ggplot(stack(df), aes(x = ind, y = values, color=ind)) +
geom_boxplot(outlier.color="black")
# Check NA and replacement
sum(is.na(df))
df %>% select(everything()) %>%
summarise_all(list(~sum(is.na(.))))
# Replace NA with 0
dfClean <- df %>% select(-total_tests,
-new_tests,
-reproduction_rate)
dfClean[is.na(dfClean)] <- 0
sum(is.na(dfClean))
dfTemp <- df %>% select(total_tests,
new_tests,
reproduction_rate)
dfTemp$total_tests[is.na(dfTemp$total_tests)] <- na.ma(dfTemp$total_tests, weighting = "linear", k=21)[834:854]
dfTemp$new_tests[is.na(dfTemp$new_tests)] <- round(na.ma(dfTemp$new_tests, weighting = "linear", k=21)[834:854],0)
dfTemp$reproduction_rate[is.na(dfTemp$reproduction_rate)] <- round(na.ma(dfTemp$reproduction_rate, weighting = "linear", k=64)[1:64],2)
overallAfterNA <- ggplot(stack(df), aes(x = ind, y = values, color=ind)) +
geom_boxplot(outlier.color="black")
dfClean <- dfTemp
View(dfClean)
library(tidyverse)
library(ggplot2)
library(corrplot)
library(dplyr)
library(lubridate)
library(forecast)
library(imputeTS)
df <- read.csv("dataset/dataCovidPredict.csv")
## Preporcessing data
# Check dataset type
str(df)
# Consider txn_date is type factor. We have to change it to date type.
df$txn_date <- as.Date(df$txn_date, format="%m/%d/%Y")
tail(df)
str(df)
overallBeforeNA <- ggplot(stack(df), aes(x = ind, y = values, color=ind)) +
geom_boxplot(outlier.color="black")
sum(is.na(df))
df %>% select(everything()) %>%
summarise_all(list(~sum(is.na(.))))
dfClean <- df %>% select(-total_tests,
-new_tests,
-reproduction_rate)
dfClean[is.na(dfClean)] <- 0
sum(is.na(dfClean))
View(dfClean)
library(tidyverse)
library(ggplot2)
library(corrplot)
library(dplyr)
library(lubridate)
library(forecast)
library(imputeTS)
df <- read.csv("dataset/dataCovidPredict.csv")
## Preporcessing data
# Check dataset type
str(df)
# Consider txn_date is type factor. We have to change it to date type.
df$txn_date <- as.Date(df$txn_date, format="%m/%d/%Y")
tail(df)
str(df)
# Check outlier
#Overall
overallBeforeNA <- ggplot(stack(df), aes(x = ind, y = values, color=ind)) +
geom_boxplot(outlier.color="black")
#1 txn_date: NO
ggplot(df, aes('',txn_date)) +
geom_boxplot()
#2 new_case: YES
ggplot(df, aes('',new_case)) +
geom_boxplot()
#3 total_case: YES
ggplot(df, aes('',total_case)) +
geom_boxplot()
#4 new_case_excludeabroad: YES
ggplot(df, aes('',new_case_excludeabroad)) +
geom_boxplot()
#5 total_case_excludeabroad: YES
ggplot(df, aes('',total_case_excludeabroad)) +
geom_boxplot()
#6 new_death: YES
ggplot(df, aes('',new_death)) +
geom_boxplot()
#7 total_death: NO
ggplot(df, aes('',total_death)) +
geom_boxplot()
#8 new_recovered: YES
ggplot(df, aes('',new_recovered)) +
geom_boxplot()
#9 total_recovered: YES
ggplot(df, aes('',total_recovered)) +
geom_boxplot()
#10 total_vaccinations: NO
ggplot(df, aes('',total_vaccinations)) +
geom_boxplot()
#11 people_vaccinated: NO
ggplot(df, aes('',people_vaccinated)) +
geom_boxplot()
#12 people_fully_vaccinated: NO
ggplot(df, aes('',people_fully_vaccinated)) +
geom_boxplot()
#13 total_boosters: YES
ggplot(df, aes('',total_boosters)) +
geom_boxplot()
#14 new_vaccinations: YES
ggplot(df, aes('',new_vaccinations)) +
geom_boxplot()
#15 stringency_index: YES
ggplot(df, aes('',stringency_index)) +
geom_boxplot()
#16 excess_mortality_cumulative_absolute: YES
ggplot(df, aes('',excess_mortality_cumulative_absolute)) +
geom_boxplot()
#17 excess_mortality_cumulative: YES
ggplot(df, aes('',excess_mortality_cumulative)) +
geom_boxplot()
#18 excess_mortality: YES
ggplot(df, aes('',excess_mortality)) +
geom_boxplot()
ggplot(stack(df), aes(x = ind, y = values, color=ind)) +
geom_boxplot(outlier.color="black")
# Check NA and replacement
sum(is.na(df))
df %>% select(everything()) %>%
summarise_all(list(~sum(is.na(.))))
# Replace NA with 0
dfClean <- df %>% select(-total_tests,
-new_tests,
-reproduction_rate)
dfClean[is.na(dfClean)] <- 0
sum(is.na(dfClean))
dfTemp <- df %>% select(total_tests,
new_tests,
reproduction_rate)
dfTemp$total_tests[is.na(dfTemp$total_tests)] <- na.ma(dfTemp$total_tests, weighting = "linear", k=21)[834:854]
dfTemp$new_tests[is.na(dfTemp$new_tests)] <- round(na.ma(dfTemp$new_tests, weighting = "linear", k=21)[834:854],0)
dfTemp$reproduction_rate[is.na(dfTemp$reproduction_rate)] <- round(na.ma(dfTemp$reproduction_rate, weighting = "linear", k=64)[1:64],2)
overallAfterNA <- ggplot(stack(df), aes(x = ind, y = values, color=ind)) +
geom_boxplot(outlier.color="black")
dfClean$total_tests <- dfTemp$total_tests
dfClean$new_tests <- dfTemp$new_tests
dfClean$reproduction_rate <- dfTemp$reproduction_rate
View(dfClean)
startdate <- as.Date("01/11/2020","%m/%d/%Y")
dfClean$txn_dat2 <-  as.Date(dfClean$txn_date,"%m/%d/%Y")
dfClean$NumDays  <- difftime(dfClean$txn_dat2,startdate ,units="days")
dfClean$NumDays <- as.numeric(dfClean$NumDays)
View(dfClean)
# Remove txn_dat2 column
dfClean <- dfClean %>% select(-txn_dat2)
View(dfClean)
str(dfClean)
# Select column
dfClean$all_new_case <- dfClean$new_case + df$new_case_excludeabroad
corrplot(cor( dfClean %>% select(new_case) ))
corrplot(cor( dfClean %>% select(-txn_date)))
cor(dfClean %>% select(-txn_date))
as.data.frame(cor(dfClean %>% select(-txn_date)))
dfCor <- cor(dfClean %>% select(-txn_date))
View(dfCor)
dfCor <- as.data.frame(cor(dfClean %>% select(-txn_date)))
View(dfCor)
# Plot line smooth regression
ggplot(dfClean, aes(NumDays, new_case)) + geom_point() + geom_smooth(method = lm)
View(dfCor)
# Plot line smooth regression
ggplot(dfClean, aes(NumDays, new_case)) + geom_line()
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, new_case)) + geom_line()
View(dfClean)
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, total_case)) + geom_line()
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, total_Case)) + geom_point() + geom_smooth(method =lm)
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, total_case)) + geom_point() + geom_smooth(method =lm)
# Plot line smooth regression
ggplot(dfClean, aes(NumDays, total_case)) + geom_point() + geom_smooth(method =lm)
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, total_case)) + geom_point() + geom_line
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, total_case)) + geom_point() + geom_line()
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, new_case)) + geom_point(colors="green") + geom_line()
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, new_case)) + geom_point(colour ="green") + geom_line(colour ="green")
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, new_case)) + geom_point() + geom_line(colour ="green")
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, new_case)) + geom_point() + geom_line(colour ="#008000")
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, new_case)) + geom_point() + geom_line(colour ="#228B22")
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, new_case)) + geom_point() + geom_line(colour ="#228B22",size=1)
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, new_case)) + geom_point() + geom_line(colour ="#228B22",size=4)
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, new_case)) + geom_point() + geom_line(colour ="#228B22",size=2)
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, new_case)) + geom_point() + geom_line(colour ="#228B22",size=1.5)
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, new_case)) + geom_point() + geom_line(colour ="#228B22",size=0.7)
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, new_case)) + geom_point() + geom_line(colour ="#228B22",size=1)
View(dfClean)
ggplot(dfClean, aes(txn_date, total_case)) + geom_line(colour ="#006400",size=1)
ggplot(dfClean, aes(txn_date, total_case)) + geom_line(colour ="#006400",size=2)
plot(df$txn_date, df$new_case)
ggplot(dfClean, aes(txn_date, total_case)) + geom_line(colour ="#006400",size=2)
# Plot line smooth regression
ggplot(dfClean, aes(txn_date, new_case)) + geom_point() + geom_line(colour ="#228B22",size=1) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, total_case)) + geom_line(colour ="#006400",size=2) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, total_case)) + geom_line(colour ="#006400",size=2) + scale_x_date(date_labels = "%Y %b %d") + date_minor_breaks = "2 day"
ggplot(dfClean, aes(txn_date, total_case)) + geom_line(colour ="#006400",size=2) + scale_x_date(date_labels = "%Y %b %d", date_minor_breaks = "2 day")
str(dfClean)
ggplot(dfClean, aes(txn_date, new_case_excludeabroad)) + geom_point() + geom_line(colour ="#006400",size=2) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, new_case_excludeabroad)) + geom_point() + geom_line(colour ="#006400",size=1) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, new_case_excludeabroad)) + geom_point() + geom_line(colour ="#32CD32",size=1) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, new_case_excludeabroad)) + geom_line(colour ="#32CD32",size=1) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, total_case_excludeabroad )) + geom_line(colour ="#32CD32",size=1) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, total_case_excludeabroad)) + geom_line(colour ="#32CD32",size=2) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, new_death)) + geom_point() + geom_line(colour ="red",size=1) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, total_death)) + geom_line(colour ="red",size=2) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, new_recovered)) + geom_point() + geom_line(colour ="#0096FF",size=1) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, new_recovered)) + geom_line(colour ="#0096FF",size=2) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, total_recovered)) + geom_line(colour ="#0096FF",size=2) + scale_x_date(date_labels = "%Y %b %d")
install.packages("reshape2")
library(reshape2)
str(df)
str(dfClean)
temp <- dfClean %>% select(total_vaccinations,
people_vaccinated,
people_fully_vaccinated,
total_boosters,
new_vaccinations)
tempData <- dfClean %>% select(total_vaccinations,
people_vaccinated,
people_fully_vaccinated,
total_boosters,
new_vaccinations)
tempData <- dfClean %>% select(txn_date,
total_vaccinations,
people_vaccinated,
people_fully_vaccinated,
total_boosters,
new_vaccinations)
data_long <- melt(tempData, id = "Date")
data_long <- melt(tempData, id = "txn_date")
ggplot(data_long,aes(x = txn_date, y = people, color = variable)) +  geom_line()
ggplot(data_long,aes(x = txn_date, y = value, color = variable)) +  geom_line()
tempData <- dfClean %>% select(txn_date,
people_vaccinated,
people_fully_vaccinated,
total_boosters,
new_vaccinations)
data_long <- melt(tempData, id = "txn_date")
ggplot(data_long,aes(x = txn_date, y = value, color = variable)) +  geom_line()
tempData <- dfClean %>% select(txn_date,
total_vaccinations,
people_vaccinated,
people_fully_vaccinated,
total_boosters,
new_vaccinations)
data_long <- melt(tempData, id = "txn_date")
ggplot(data_long,aes(x = txn_date, y = value, color = variable)) +  geom_line()
ggplot(data_long,aes(x = txn_date, y = value, color = variable)) +  geom_line(size=2)
tempData <- dfClean %>% select(txn_date,
people_vaccinated,
people_fully_vaccinated,
total_boosters,
new_vaccinations)
data_long <- melt(tempData, id = "txn_date")
ggplot(data_long,aes(x = txn_date, y = value, color = variable)) +  geom_line(size=2)
ggplot(dfClean, aes(txn_date, people_vaccinated)) + geom_line(colour ="#0096FF",size=2) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, people_fully_vaccinated)) + geom_line(colour ="#0096FF",size=2) + scale_x_date(date_labels = "%Y %b %d")
ggplot(dfClean, aes(txn_date, people_fully_vaccinated)) + geom_line(colour ="#0096FF",size=2) + scale_x_date(date_labels = "%Y %b %d")
View(df)
